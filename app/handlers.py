
from datetime import datetime 
from pathlib import Path


from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State


import app.keyboards as kb 
from data import save_event, load_events, save_events, load_sorted_events
from app.keyboards import events_keyboard, delete_keyboard, sorted_events_keyboard


router = Router()
now = datetime.now()
BOT_PASSWORD = "1234"
authorized_users = set()



class Auth(StatesGroup):
    waiting_for_password = State()

class NewEvent(StatesGroup):
    name = State()
    date = State()
    time = State()
    description = State()


class EditEvent(StatesGroup):
    select_event = State()  # –≤—ã–±–æ—Ä —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    select_field = State()  # –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (name, date, time, description)
    new_value = State()     # –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è


#–°—Ç–∞—Ä—Ç –±–æ—Ç–∞


@router.message(CommandStart())
async def start_bot(message: Message, state: FSMContext):
    if message.from_user.id in authorized_users:
        await message.answer("‚úÖ –¢—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.", reply_markup=kb.main)
    else:
        await message.answer("üîí –í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")
        await state.set_state(Auth.waiting_for_password)


@router.message(Auth.waiting_for_password)
async def check_password(message: Message, state: FSMContext):
    if message.text == BOT_PASSWORD:
        authorized_users.add(message.from_user.id)
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.", reply_markup=kb.main)
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

        
#—Ä–∞–Ω–¥–æ–º–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
@router.message(Command("help"))
async def get_help(message: Message):
    await message.reply(
    "This bot can:\n"
    "New event:\n"
    "All events:\n"
    "Delete event:\n"
    "Filter events:\n"
    "Current time:"
    )
#–≤—Ä–µ–º—è —Å–µ–π—á–∞—Å
@router.message(Command("time"))
async def get_time(message: Message):
    await message.answer(f"Now is {now.strftime('%H:%M')}")

#–Ω–æ–≤—ã–π –µ–≤–µ–Ω—Ç
@router.message(Command("new_event"))
async def new_event_1(message: Message, state: FSMContext):
    await state.set_state(NewEvent.name)
    await message.answer("Name of the event:")


@router.message(NewEvent.name)
async def new_event_2(message: Message, state: FSMContext):
    name = message.text.strip()
    events = load_events()
    if any(ev.get("name") == name for ev in events):
        await message.answer("Event with this name already exists. Please enter another name:")
        return  
    await state.update_data(name=name)
    await state.set_state(NewEvent.date)
    await message.answer("Date of the event:")


@router.message(NewEvent.date)
async def new_event_3(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    await state.set_state(NewEvent.time)
    await message.answer("Time of the event:")


@router.message(NewEvent.time)
async def new_event_4(message: Message, state: FSMContext):
    await state.update_data(time=message.text)
    await state.set_state(NewEvent.description)
    await message.answer("Description of the event:")


@router.message(NewEvent.description)
async def new_event_5(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()
    save_event(data)
    await message.answer(f"The new event was created! \nName: {data['name']} \n\nDate: {data['date']} \n\nTime: {data['time']} \n\nDescription: {data['description']}")


    await state.clear()


@router.message(Command("all_events"))
async def all_events(message: Message):
    await message.answer(
        "All events: ",
        reply_markup=events_keyboard()
    )


@router.callback_query(lambda c: c.data.startswith("event:"))
async def event_detail(callback: CallbackQuery):
    event_name = callback.data.split(":", 1)[1]
    events = load_events()

    for e in events:
        if e["name"] == event_name:
            text = (
                f"üìå Name: {e['name']}\n"
                f"üìÖ Date: {e['date']}\n"
                f"‚è∞ Time: {e['time']}\n"
                f"üìù Description: {e['description']}"
            )
            await callback.message.answer(text)
            break

    await callback.answer()


@router.message(F.text == "/delete_event")
async def delete_event_cmd(message: Message):
    kb = delete_keyboard()
    if kb:
        await message.answer("–í—ã–±–µ—Ä–∏ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    else:
        await message.answer("‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


@router.callback_query(lambda c: c.data.startswith("delete:"))
async def delete_event(callback: CallbackQuery):
    event_name = callback.data.split(":", 1)[1]
    events = load_events()  # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    updated = [e for e in events if e["name"] != event_name]  # —É–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    save_events(updated)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ
    await callback.message.answer("–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!")


@router.message(Command("edit_event"))
async def edit_event_cmd(message: Message):
    events = load_events()
    if not events:
        await message.answer("‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    keyboard = events_keyboard(prefix="edit:")  # –∫–Ω–æ–ø–∫–∏ —Å callback_data "edit:NAME"
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)


# –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ callback
@router.callback_query(lambda c: c.data.startswith("edit:"))
async def edit_event_callback(callback: CallbackQuery, state: FSMContext):
    event_name = callback.data.split(":", 1)[1]
    await state.update_data(event_name=event_name)
    await state.set_state(EditEvent.select_field)
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–±—ã—Ç–∏–µ: {event_name}\n"
        f"–ö–∞–∫–æ–µ –ø–æ–ª–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? (name, date, time, description)"
    )
    await callback.answer()


# –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å
@router.message(EditEvent.select_field)
async def select_field(message: Message, state: FSMContext):
    field = message.text.strip().lower()
    if field not in ["name", "date", "time", "description"]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ. –í–≤–µ–¥–∏—Ç–µ: name, date, time –∏–ª–∏ description")
        return
    await state.update_data(field=field)
    await state.set_state(EditEvent.new_value)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:")


# –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
@router.message(EditEvent.new_value)
async def set_new_value(message: Message, state: FSMContext):
    data = await state.get_data()
    event_name = data["event_name"]
    field = data["field"]
    new_value = message.text.strip()

    events = load_events()
    for e in events:
        if e["name"] == event_name:
            e[field] = new_value
            break

    save_events(events)
    await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {field} = {new_value}")
    await state.clear()


@router.message(Command("sorted_events"))
async def sorted_events_cmd(message: Message):
    events = load_sorted_events()
    if not events:
        await message.answer("‚ùå –°–æ–±—ã—Ç–∏–π –Ω–µ—Ç.")
        return

    await message.answer(
        "üìÖ –°–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–µ:",
        reply_markup=sorted_events_keyboard()
    )
